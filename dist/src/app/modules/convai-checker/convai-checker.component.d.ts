import { ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { PerspectiveStatus, CommentFeedback } from './perspective-status.component';
import { PerspectiveApiService } from './perspectiveapi.service';
import { AnalyzeCommentResponse, SpanScores } from './perspectiveapi-types';
export interface InputEvent {
    target: HTMLInputElement;
}
export interface DemoSettings {
    configuration: string;
    gradientColors: string[];
    apiKey?: string;
    useGapi: boolean;
    usePluginEndpoint: boolean;
    showPercentage: boolean;
    showMoreInfoLink: boolean;
    feedbackText: [string, string, string];
    scoreThresholds: [number, number, number];
    hideLoadingIconAfterLoad: boolean;
    hideLoadingIconForScoresBelowMinThreshold: boolean;
    alwaysHideLoadingIcon: boolean;
    loadingIconStyle: string;
    userFeedbackPromptText: string;
    communityId?: string;
}
export declare const DEFAULT_DEMO_SETTINGS: {
    configuration: string;
    gradientColors: string[];
    apiKey: string;
    useGapi: boolean;
    usePluginEndpoint: boolean;
    showPercentage: boolean;
    showMoreInfoLink: boolean;
    feedbackText: [string, string, string];
    scoreThresholds: [number, number, number];
    hideLoadingIconAfterLoad: boolean;
    hideLoadingIconForScoresBelowMinThreshold: boolean;
    alwaysHideLoadingIcon: boolean;
    loadingIconStyle: string;
    userFeedbackPromptText: string;
};
export declare class ConvaiChecker implements OnInit, OnChanges {
    private elementRef;
    private analyzeApiService;
    statusWidget: PerspectiveStatus;
    inputId: string;
    serverUrl: string;
    fontSize: number;
    demoSettings: DemoSettings;
    demoSettingsJson: string | null;
    pluginEndpointUrl: string;
    scoreChangeAnimationCompleted: EventEmitter<void>;
    scoreChanged: EventEmitter<number>;
    modelInfoLinkClicked: EventEmitter<void>;
    analyzeCommentResponseChanged: EventEmitter<AnalyzeCommentResponse | null>;
    analyzeCommentResponse: AnalyzeCommentResponse | null;
    private checkInProgress;
    private mostRecentRequestSubscription;
    private pendingRequest;
    private lastRequestedText;
    private lastPendingRequestedText;
    private inputListener;
    initializeErrorMessage: string;
    analyzeErrorMessage: string | null;
    canAcceptFeedback: boolean;
    feedbackRequestInProgress: boolean;
    private sessionId;
    private gradientColors;
    private apiKey;
    private configuration;
    constructor(elementRef: ElementRef, analyzeApiService: PerspectiveApiService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    checkText(text: string): void;
    private _handleInputEvent(event);
    private _handlePendingCheckRequest(text);
    onCommentFeedbackReceived(feedback: CommentFeedback): void;
    handleScoreChangeAnimationCompleted(): void;
    handleModelInfoLinkClicked(): void;
    suggestCommentScore(text: string, feedback: CommentFeedback): void;
    private _getErrorMessage(error);
    private _checkText(text);
    getMaxScore(response: AnalyzeCommentResponse): number;
    getMaxSpanScore(spanScores: SpanScores): number;
}
