{"__symbolic":"module","version":4,"metadata":{"ConvaiCheckerModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":17,"character":1},"arguments":[{"declarations":[{"__symbolic":"reference","name":"ConvaiChecker"},{"__symbolic":"reference","name":"PerspectiveStatus"}],"exports":[{"__symbolic":"reference","name":"ConvaiChecker"},{"__symbolic":"reference","name":"PerspectiveStatus"}],"imports":[{"__symbolic":"reference","module":"@angular/platform-browser/animations","name":"BrowserAnimationsModule","line":27,"character":4},{"__symbolic":"reference","module":"@angular/platform-browser","name":"BrowserModule","line":28,"character":4},{"__symbolic":"reference","module":"@angular/forms","name":"FormsModule","line":29,"character":4},{"__symbolic":"reference","module":"@angular/http","name":"HttpModule","line":30,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatButtonModule","line":31,"character":4},{"__symbolic":"reference","module":"@angular/material/form-field","name":"MatFormFieldModule","line":32,"character":4},{"__symbolic":"reference","module":"@angular/material","name":"MatInputModule","line":33,"character":4},{"__symbolic":"reference","module":"@angular/material/select","name":"MatSelectModule","line":34,"character":4}],"providers":[{"__symbolic":"reference","name":"ɵa"},{"provide":{"__symbolic":"reference","module":"@angular/common","name":"APP_BASE_HREF","line":36,"character":47},"useValue":"/"}],"bootstrap":[{"__symbolic":"reference","name":"ConvaiChecker"}]}]}],"members":{}},"InputEvent":{"__symbolic":"interface"},"DemoSettings":{"__symbolic":"interface"},"DEFAULT_DEMO_SETTINGS":{"configuration":"default","gradientColors":["#25C1F9","#7C4DFF","#D400F9"],"apiKey":"","useGapi":false,"usePluginEndpoint":false,"showPercentage":true,"showMoreInfoLink":true,"feedbackText":["Unlikely to be perceived as toxic","Unsure if this will be perceived as toxic","Likely to be perceived as toxic"],"scoreThresholds":[0,0.4,0.7],"hideLoadingIconAfterLoad":false,"hideLoadingIconForScoresBelowMinThreshold":false,"alwaysHideLoadingIcon":false,"loadingIconStyle":{"__symbolic":"select","expression":{"__symbolic":"reference","name":"LoadingIconStyle"},"member":"CIRCLE_SQUARE_DIAMOND"},"userFeedbackPromptText":"Seem wrong?"},"ConvaiChecker":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":123,"character":1},"arguments":[{"selector":"convai-checker","template":"<div id=\"checkerContainer\">\n  <!-- TODO(rachelrosen): merge perspective-status and convai-checker\n       and move a large portion of the convai-checker code to the perspective-api service. -->\n  <perspective-status\n    [fontSize]=\"fontSize\"\n    [indicatorWidth]=\"13\"\n    [indicatorHeight]=\"13\"\n    [gradientColors]=\"demoSettings.gradientColors\"\n    [scoreThresholds]=\"demoSettings.scoreThresholds\"\n    [feedbackText]=\"demoSettings.feedbackText\"\n    [configurationInput]=\"demoSettings.configuration\"\n    [showPercentage]=\"demoSettings.showPercentage\"\n    [showMoreInfoLink]=\"demoSettings.showMoreInfoLink\"\n    [hasScore]=\"analyzeCommentResponse !== null\"\n    [canAcceptFeedback]=\"canAcceptFeedback\"\n    [feedbackRequestInProgress]=\"feedbackRequestInProgress\"\n    [initializeErrorMessage]=\"initializeErrorMessage\"\n    [analyzeErrorMessage]=\"analyzeErrorMessage\"\n    [userFeedbackPromptText]=\"demoSettings.userFeedbackPromptText\"\n    [hideLoadingIconAfterLoad]=\"demoSettings.hideLoadingIconAfterLoad\"\n    [hideLoadingIconForScoresBelowMinThreshold]=\"demoSettings.hideLoadingIconForScoresBelowMinThreshold\"\n    [alwaysHideLoadingIcon]=\"demoSettings.alwaysHideLoadingIcon\"\n    [loadingIconStyle]=\"demoSettings.loadingIconStyle\"\n    (commentFeedbackSubmitted)=\"onCommentFeedbackReceived($event)\"\n    (scoreChangeAnimationCompleted)=\"handleScoreChangeAnimationCompleted()\"\n    (modelInfoLinkClicked)=\"handleModelInfoLinkClicked()\">\n  </perspective-status>\n</div>\n","styles":["#checkerContainer{font-family:Roboto,sans-serif;line-height:1}"],"providers":[{"__symbolic":"reference","name":"ɵa"}],"host":{"(document:input)":"_handleInputEvent($event)","$quoted$":["(document:input)"]}}]}],"members":{"statusWidget":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":162,"character":3},"arguments":[{"__symbolic":"reference","name":"PerspectiveStatus"}]}]}],"inputId":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":163,"character":3}}]}],"serverUrl":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":164,"character":3}}]}],"fontSize":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":165,"character":3}}]}],"demoSettings":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":166,"character":3}}]}],"demoSettingsJson":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":171,"character":3}}]}],"pluginEndpointUrl":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":172,"character":3}}]}],"scoreChangeAnimationCompleted":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":173,"character":3}}]}],"scoreChanged":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":174,"character":3}}]}],"modelInfoLinkClicked":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":175,"character":3}}]}],"analyzeCommentResponseChanged":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":176,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":198,"character":26},{"__symbolic":"reference","name":"ɵa"}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"checkText":[{"__symbolic":"method"}],"_handleInputEvent":[{"__symbolic":"method"}],"_handlePendingCheckRequest":[{"__symbolic":"method"}],"onCommentFeedbackReceived":[{"__symbolic":"method"}],"handleScoreChangeAnimationCompleted":[{"__symbolic":"method"}],"handleModelInfoLinkClicked":[{"__symbolic":"method"}],"suggestCommentScore":[{"__symbolic":"method"}],"_getErrorMessage":[{"__symbolic":"method"}],"_checkText":[{"__symbolic":"method"}],"getMaxScore":[{"__symbolic":"method"}],"getMaxSpanScore":[{"__symbolic":"method"}]}},"Shape":{"CIRCLE":0,"SQUARE":1,"DIAMOND":2},"Emoji":{"SMILE":0,"NEUTRAL":1,"SAD":2},"Configuration":{"DEMO_SITE":0,"EXTERNAL":1},"ConfigurationInput":{"DEMO_SITE":"default","EXTERNAL":"external"},"ScoreThreshold":{"OKAY":0,"BORDERLINE":0.2,"UNCIVIL":0.76,"MAX":1},"LoadingIconStyle":{"CIRCLE_SQUARE_DIAMOND":"circle_square_diamond","EMOJI":"emoji"},"DEFAULT_FEEDBACK_TEXT":"likely to be perceived as \"toxic.\"","PerspectiveStatus":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":91,"character":1},"arguments":[{"selector":"perspective-status","template":"<div #widgetContainer id=\"widgetContainer\" class=\"horizontal-container\">\n  <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n        rel=\"stylesheet\">\n  <!-- For items that need to be animated, hidden is used instead of *ngIf.\n       This is because *ngIf removes items from the DOM, which means they\n       cannot be found when the component is initializing if their display\n       conditions are not met. -->\n  <div id=\"animationContainer\">\n    <div *ngIf=\"loadingIconStyle === loadingIconStyleConst.CIRCLE_SQUARE_DIAMOND\"\n         id=\"circleSquareDiamondLoadingIconContainer\">\n      <div\n           #circleSquareDiamondWidget\n           id=\"circleSquareDiamondWidget\"\n           class=\"dot\"\n           [style.width]=\"indicatorWidth\"\n           [style.height]=\"indicatorHeight\"\n           [hidden]=\"shouldHideStatusWidget || alwaysHideLoadingIcon\"\n           [attr.aria-hidden]=\"shouldHideStatusWidget || isPlayingShowOrHideLoadingWidgetAnimation || alwaysHideLoadingIcon\"\n           [attr.aria-label]=\"getAnimationA11yLabel(loadingIconStyle, isPlayingLoadingAnimation)\"\n           tabindex=0>\n      </div>\n    </div>\n    <div *ngIf=\"loadingIconStyle === loadingIconStyleConst.EMOJI\">\n      <div\n           #emojiStatusWidget\n           id=\"emojiStatusWidget\"\n           class=\"dot emojiWidget\"\n           tabindex=0\n           [attr.aria-label]=\"getAnimationA11yLabel(loadingIconStyle, isPlayingLoadingAnimation)\">\n        <img #smileEmoji id=\"smileEmoji\" class=\"iconEmoji\"\n             [ngClass]=\"{hiddenEmoji: hideEmojiIconsForLoadingAnimation || score >= scoreThresholds[1]}\"\n             src=\"assets/grinning_face.png\">\n        <img #neutralEmoji id=\"neutralEmoji\" class=\"iconEmoji\"\n             [ngClass]=\"{hiddenEmoji: hideEmojiIconsForLoadingAnimation || (score < scoreThresholds[1] || score >= scoreThresholds[2])}\"\n             src=\"assets/thinking_face.png\">\n        <img #sadEmoji id=\"sadEmoji\" class=\"iconEmoji\"\n             [ngClass]=\"{hiddenEmoji: hideEmojiIconsForLoadingAnimation || score < scoreThresholds[2]}\"\n             src=\"assets/disappointed_face.png\">\n      </div>\n    </div>\n  </div>\n\n  <div class=\"layersContainer\">\n    <!-- TODO(rachelrosen): Check the necessity of specifying aria-hidden here and elsewhere. -->\n    <div id=\"layer1\" [ngClass]=\"{'horizontal-container': true,\n                                 'detailsContainer': true,\n                                 'layer': true,\n                                 'hiddenLayer': !layersAnimating && currentLayerIndex !== 0}\"\n                     [attr.aria-hidden]=\"currentLayerIndex !== 0\">\n      <div id=\"layerText\" class=\"layerText\">\n        <!-- For layer 1 text, configurations EXTERNAL and DEMO_SITE are the same.-->\n        <div>\n          <div id=\"noBorderButtonscoreInfo\"\n               class=\"widgetText\"\n               *ngIf=\"hasScore && !analyzeErrorMessage && shouldShowFeedback(score)\"\n               [style.fontSize]=\"fontSize\"\n               tabindex=0\n               role=\"status\"\n               [attr.aria-hidden]=\"!showScore || isPlayingLoadingAnimation || isPlayingFadeDetailsAnimation\">\n            <span id=\"feedbackText\" [innerHTML]=\"parseEmojis(getFeedbackTextForScore(score))\"></span><span *ngIf=\"showPercentage\" id=\"percentage\">({{score.toFixed(2)}})</span><span\n               *ngIf=\"showMoreInfoLink\"\n               class=\"link\"\n               role=\"link\"\n               tabindex=0\n               (keyup.enter)=\"notifyModelInfoLinkClicked()\"\n               (keyup.space)=\"notifyModelInfoLinkClicked()\"\n               (click)=\"notifyModelInfoLinkClicked()\">Learn more</span>\n          </div>\n\n          <div class=\"error\" *ngIf=\"initializeErrorMessage\">\n            {{initializeErrorMessage}}\n          </div>\n          <div class=\"error\" *ngIf=\"analyzeErrorMessage\">\n            {{analyzeErrorMessage}}\n          </div>\n        </div><!-- End configuration DEMO_SITE or EXTERNAL -->\n\n      </div> <!-- End layerText -->\n\n      <div class=\"interactiveElement\">\n        <div *ngIf=\"configuration === configurationEnum.EXTERNAL\">\n          <div id=\"infoButtonContainer\" class=\"infoButtonContainer\">\n            <button *ngIf=\"hasScore && shouldShowFeedback(score)\"\n              id=\"infoButton\"\n              class=\"infoButton\"\n              role=\"button\"\n              aria-label=\"Show score details\"\n              [disabled]=\"!showScore || isPlayingLoadingAnimation || layersAnimating\"\n              (click)=\"setShowMoreInfo(true)\"\n              tabindex=0>\n              <i class=\"material-icons md-dark md-18\">info</i>\n            </button>\n          </div>\n        </div> <!-- End configuration EXTERNAL-->\n\n        <div *ngIf=\"configuration === configurationEnum.DEMO_SITE\">\n          <button id=\"seemWrongButtonDemoConfig\"\n               *ngIf=\"canAcceptFeedback && shouldShowFeedback(score)\"\n               role=\"button\"\n               class=\"seemWrongButton purpleButton noBorderButton\"\n               [style.fontSize]=\"fontSize\"\n               [disabled]=\"!showScore || isPlayingLoadingAnimation || layersAnimating\"\n               (click)=\"feedbackContainerClicked()\"\n               tabindex=0>\n            {{userFeedbackPromptText}}\n          </button>\n        </div>\n\n      </div> <!-- End interactiveElement -->\n    </div> <!-- End layer1 -->\n\n    <div id=\"layer2\" [ngClass]=\"{'horizontal-container': true,\n                                 'detailsContainer': true,\n                                 'layer': true,\n                                 'hiddenLayer': !layersAnimating && currentLayerIndex !== 1}\"\n                     [attr.aria-hidden]=\"currentLayerIndex !== 1\">\n\n      <div class=\"layerText\">\n        <div *ngIf=\"configuration === configurationEnum.EXTERNAL\">\n          <div id=\"detailedScoreInfo\"\n               class=\"widgetText\"\n               role=\"status\"\n               tabindex=0>\n            <span>Scored {{(score.toFixed(2) * 100).toFixed(0)}}% by the <a href=\"https://conversationai.github.io/\">Perspective \"Toxicity\" analyzer</a>\n            </span>\n          </div>\n        </div> <!-- End configuration EXTERNAL-->\n\n        <div *ngIf=\"configuration === configurationEnum.DEMO_SITE\">\n          <div class=\"widgetText\"\n            tabindex=0>\n            <span>Is this comment\n              <span class=\"link\"\n                    role=\"link\"\n                    tabindex=0\n                    (keyup.enter)=\"notifyModelInfoLinkClicked()\"\n                    (keyup.space)=\"notifyModelInfoLinkClicked()\"\n                    (click)=\"notifyModelInfoLinkClicked()\">toxic</span>?\n            </span>\n          </div>\n        </div> <!-- End configuration DEMO_SITE -->\n\n      </div> <!-- End layerText -->\n\n      <div class=\"interactiveElement\">\n\n        <div *ngIf=\"configuration === configurationEnum.EXTERNAL\">\n          <div class=\"horizontal-container\">\n            <div class=\"feedbackContainer widgetText\"\n                 [style.fontSize]=\"fontSize\"\n                 [attr.aria-hidden]=\"!showScore || isPlayingLoadingAnimation\">\n              <button id=\"seemWrongButton\"\n                   *ngIf=\"canAcceptFeedback && !showFeedbackQuestion\n                      && !feedbackRequestInProgress && !feedbackRequestSubmitted && !feedbackRequestError\"\n                   role=\"button\"\n                   class=\"seemWrongButton greyButton noBorderButton\"\n                   [style.fontSize]=\"fontSize\"\n                   [disabled]=\"!showScore || isPlayingLoadingAnimation || layersAnimating\"\n                   (click)=\"feedbackContainerClicked()\"\n                   tabindex=0>\n                {{userFeedbackPromptText}}\n              </button>\n              <div id=\"seemWrongQuestion\" *ngIf=\"showFeedbackQuestion && !feedbackRequestInProgress\">\n                <div class=\"feedbackQuestion widgetText\" tabindex=0>Is this text toxic?</div>\n                <div class=\"yesNoButtonContainer horizontal-container\">\n                  <div>\n                    <button\n                      id=\"yesButtonExternalConfig\"\n                      class=\"yesNoButton greyButton underlineButton noBorderButton\"\n                      role=\"button\"\n                      [style.fontSize]=\"fontSize\"\n                      [disabled]=\"!showScore || isPlayingLoadingAnimation || layersAnimating\"\n                      (click)=\"submitFeedback(true)\"\n                      tabindex=0>\n                      Yes\n                    </button>\n                  </div>\n                  <div>\n                    <button\n                      id=\"noButtonExternalConfig\"\n                      class=\"yesNoButton greyButton underlineButton noBorderButton\"\n                      role=\"button\"\n                      [style.fontSize]=\"fontSize\"\n                      [disabled]=\"!showScore || isPlayingLoadingAnimation || layersAnimating\"\n                      (click)=\"submitFeedback(false)\"\n                      tabindex=0>\n                      No\n                    </button>\n                  </div>\n                </div>\n              </div>\n              <div id=\"feedbackSubmitting\"\n                   tabindex=0\n                   role=\"status\"\n                   *ngIf=\"feedbackRequestInProgress\">\n                Sending...\n              </div>\n              <div id=\"feedbackThanks\"\n                   tabindex=0\n                   role=\"status\"\n                   *ngIf=\"feedbackRequestSubmitted\">\n                Thanks for the feedback!\n              </div>\n              <div *ngIf=\"feedbackRequestError\">\n                <button\n                     class=\"error noBorderButton\"\n                     role=\"button\"\n                     [style.fontSize]=\"fontSize\"\n                     (click)=\"resetFeedback()\"\n                     tabindex=0>\n                  Error submitting feedback. Click to try again.\n                </button>\n              </div>\n            </div>\n            <div id=\"infoButtonContainer\" class=\"infoButtonContainer\">\n              <button *ngIf=\"hasScore\"\n                id=\"cancelButton\"\n                class=\"infoButton\"\n                role=\"button\"\n                aria-label=\"Hide score details\"\n                [disabled]=\"!showScore || isPlayingLoadingAnimation || layersAnimating\"\n                (click)=\"setShowMoreInfo(false)\"\n                tabindex=0>\n                <i class=\"material-icons md-dark md-18\">cancel</i>\n              </button>\n            </div>\n          </div>\n        </div> <!-- End configuration EXTERNAL -->\n\n        <div *ngIf=\"configuration === configurationEnum.DEMO_SITE\">\n          <div class=\"yesNoButtonContainer horizontal-container\"\n               *ngIf=\"!feedbackRequestInProgress && !feedbackRequestSubmitted && !feedbackRequestError\">\n            <div>\n              <button\n                id=\"yesButtonDemoConfig\"\n                class=\"yesNoButton purpleButton noBorderButton\"\n                role=\"button\"\n                [style.fontSize]=\"fontSize\"\n                [disabled]=\"!showScore || isPlayingLoadingAnimation || layersAnimating\"\n                (click)=\"submitFeedback(true)\"\n                tabindex=0>\n                Yes\n              </button>\n            </div>\n            <div>\n              <button\n                id=\"noButtonDemoConfig\"\n                class=\"yesNoButton purpleButton noBorderButton\"\n                role=\"button\"\n                [style.fontSize]=\"fontSize\"\n                [disabled]=\"!showScore || isPlayingLoadingAnimation || layersAnimating\"\n                (click)=\"submitFeedback(false)\"\n                tabindex=0>\n                No\n              </button>\n            </div>\n          </div>\n        </div> <!-- End configuration DEMO_SITE -->\n\n      </div> <!-- End layer2 interactive element -->\n\n    </div> <!-- End layer2 -->\n\n    <div id=\"layer3\" [ngClass]=\"{'horizontal-container': true,\n                                 'detailsContainer': true,\n                                 'hiddenLayer': !layersAnimating && currentLayerIndex !== 2}\">\n      <div class=\"interactiveElement\">\n\n        <div *ngIf=\"configuration === configurationEnum.DEMO_SITE\">\n            <div id=\"feedbackThanksDemoConfig\"\n                 class=\"widgetText\"\n                 tabindex=0\n                 role=\"status\"\n                 *ngIf=\"feedbackRequestSubmitted\">\n              <button\n                id=\"thanksForFeedbackButtonDemoConfig\"\n                class=\"noBorderButton feedbackResponseButton widgetText\"\n                role=\"button\"\n                (click)=\"resetLayers()\">\n                Thanks for your feedback!\n              </button>\n            </div>\n            <div *ngIf=\"feedbackRequestError\">\n              <button\n                   class=\"error noBorderButton feedbackResponseButton\"\n                   role=\"button\"\n                   [style.fontSize]=\"fontSize\"\n                   (click)=\"resetLayers()\"\n                   tabindex=0>\n                Error submitting feedback. Click to try again.\n              </button>\n            </div>\n        </div> <!-- End configuration DEMO_SITE. -->\n      </div> <!-- End interactiveElement. -->\n    </div> <!-- End layer3 -->\n\n  </div>\n</div>\n","styles":[".horizontal-container{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;-ms-flex-direction:row;flex-direction:row}.center-perp-axis{-webkit-box-align:center;-ms-flex-align:center;align-items:center}.dot{border-radius:50%;border:0;background-color:#00bcd4;margin:2px;padding:0;width:13px;height:13px;vertical-align:top}#circleSquareDiamondLoadingIconContainer{padding-top:2px}.emojiWidget{background-color:#ffcc4d;width:16px;height:16px}.iconEmoji{width:16px;height:16px;opacity:0}.hiddenEmoji{display:none}#animationContainer{z-index:5;width:20px;height:22px;margin-right:10px}#scoreInfoContainer{padding-top:2px}.widgetText{color:#6e7378;font-size:12px;line-height:16px;letter-spacing:.05em;width:100%}#feedbackText,#percentage{margin-right:4px}.widgetText a{color:#6e7378!important}.link{text-decoration:underline;cursor:pointer}.layerText{padding-right:10px;padding-top:2px}#detailedScoreInfo a{width:40%;color:#6e7378!important}.feedbackQuestion{margin-right:4px}.seemWrongButton{font-size:12px;font-family:Roboto,sans-serif;line-height:16px;letter-spacing:.05em;-ms-flex-item-align:start;align-self:flex-start}.detailsContainer{-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between;width:100%;margin-top:1px}.layersContainer{width:100%;position:relative}.layer{position:absolute}.hiddenLayer{display:none!important}.interactiveElement{vertical-align:top;text-align:end;margin-left:auto;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end;min-width:-webkit-fit-content;min-width:-moz-fit-content;min-width:fit-content;padding-top:1px}.interactiveElement .feedbackContainer{padding-top:2px}#layer3 .interactiveElement{-webkit-box-flex:0;-ms-flex:0 1 auto;flex:0 1 auto;margin-left:0;padding-top:2px}.noBorderButton{background-color:#fff;border:0;cursor:pointer;padding-top:0;font-family:Roboto,sans-serif}.feedbackResponseButton{padding-left:0}.purpleButton{color:#6200ea;text-transform:uppercase}.greyButton{color:#6e7378}.underlineButton{text-decoration:underline}.yesNoButton{font-size:12px;font-family:Roboto,sans-serif;line-height:16px;letter-spacing:.05em}.yesNoButton.purpleButton{margin-left:8px;margin-right:8px}.yesNoButtonContainer{-webkit-box-pack:end;-ms-flex-pack:end;justify-content:flex-end}#widgetContainer{height:50px}.error{font-size:12px;letter-spacing:.05em;line-height:16px;color:#f44336}.infoButtonContainer{margin-left:10px;width:26px;height:26px}.infoButton{background-color:transparent;border:none;cursor:pointer}.material-icons.md-18{font-size:18px}.material-icons.md-dark{color:#78909c}.material-icons.md-dark.md-inactive{color:rgba(0,0,0,.26)}"]}]},{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":394,"character":1}}],"members":{"indicatorWidth":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":398,"character":3}}]}],"indicatorHeight":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":399,"character":3}}]}],"configurationInput":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":400,"character":3}}]}],"hasScore":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":403,"character":3}}]}],"fontSize":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":404,"character":3}}]}],"gradientColors":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":405,"character":3}}]}],"canAcceptFeedback":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":406,"character":3}}]}],"feedbackRequestInProgress":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":407,"character":3}}]}],"feedbackRequestSubmitted":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":408,"character":3}}]}],"feedbackRequestError":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":409,"character":3}}]}],"initializeErrorMessage":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":410,"character":3}}]}],"feedbackText":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":411,"character":3}}]}],"scoreThresholds":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":416,"character":3}}]}],"showPercentage":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":421,"character":3}}]}],"showMoreInfoLink":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":422,"character":3}}]}],"analyzeErrorMessage":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":423,"character":3}}]}],"userFeedbackPromptText":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":424,"character":3}}]}],"hideLoadingIconAfterLoad":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":425,"character":3}}]}],"hideLoadingIconForScoresBelowMinThreshold":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":426,"character":3}}]}],"alwaysHideLoadingIcon":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":427,"character":3}}]}],"loadingIconStyle":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":428,"character":3}}]}],"scoreChangeAnimationCompleted":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":429,"character":3}}]}],"modelInfoLinkClicked":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":430,"character":3}}]}],"commentFeedbackSubmitted":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":431,"character":3}}]}],"circleSquareDiamondWidget":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":454,"character":3},"arguments":["circleSquareDiamondWidget"]}]}],"emojiWidget":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":455,"character":3},"arguments":["emojiStatusWidget"]}]}],"container":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":456,"character":3},"arguments":["widgetContainer"]}]}],"smileEmoji":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":457,"character":3},"arguments":["smileEmoji"]}]}],"neutralEmoji":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":458,"character":3},"arguments":["neutralEmoji"]}]}],"sadEmoji":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":459,"character":3},"arguments":["sadEmoji"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"NgZone","line":490,"character":30},{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":490,"character":58}]}],"ngOnInit":[{"__symbolic":"method"}],"ngAfterViewInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"ngAfterViewChecked":[{"__symbolic":"method"}],"getFirstGradientRatio":[{"__symbolic":"method"}],"getAdjustedGradientControlPoints":[{"__symbolic":"method"}],"updateGradient":[{"__symbolic":"method"}],"interpolateColors":[{"__symbolic":"method"}],"updateWidgetElement":[{"__symbolic":"method"}],"getShouldHideStatusWidget":[{"__symbolic":"method"}],"getUpdateStatusWidgetVisibilityAnimation":[{"__symbolic":"method"}],"getChangeLoadingIconVisibilityAnimation":[{"__symbolic":"method"}],"getSetIconToNeutralStateAnimation":[{"__symbolic":"method"}],"getChangeLoadingIconXValueAnimation":[{"__symbolic":"method"}],"getConfigurationFromInputString":[{"__symbolic":"method"}],"updateLayerElementContainers":[{"__symbolic":"method"}],"shouldShowFeedback":[{"__symbolic":"method"}],"parseEmojis":[{"__symbolic":"method"}],"getFeedbackTextForScore":[{"__symbolic":"method"}],"feedbackContainerClicked":[{"__symbolic":"method"}],"feedbackCompleted":[{"__symbolic":"method"}],"hideFeedbackQuestion":[{"__symbolic":"method"}],"resetFeedback":[{"__symbolic":"method"}],"resetLayers":[{"__symbolic":"method"}],"submitFeedback":[{"__symbolic":"method"}],"getResetRotationAnimation":[{"__symbolic":"method"}],"getShapeForScore":[{"__symbolic":"method"}],"getEmojiForScore":[{"__symbolic":"method"}],"getUpdateShapeAnimation":[{"__symbolic":"method"}],"setShowMoreInfo":[{"__symbolic":"method"}],"getAccessibilityDescriptionForEmoji":[{"__symbolic":"method"}],"getEmojiElementFromEmojiType":[{"__symbolic":"method"}],"getAnimationA11yLabel":[{"__symbolic":"method"}],"notifyModelInfoLinkClicked":[{"__symbolic":"method"}],"getUpdateWidgetStateAnimation":[{"__symbolic":"method"}],"notifyScoreChange":[{"__symbolic":"method"}],"setLoading":[{"__symbolic":"method"}],"getChangeOpacityAnimation":[{"__symbolic":"method"}],"getShowEmojiAnimation":[{"__symbolic":"method"}],"getHideEmojisAnimation":[{"__symbolic":"method"}],"getStartAnimationsForEmojiWidgetLoading":[{"__symbolic":"method"}],"getLoopAnimationForEmojiWidgetLoading":[{"__symbolic":"method"}],"getEndAnimationsForEmojiWidgetLoading":[{"__symbolic":"method"}],"getStartAnimationsForCircleSquareDiamondWidgetLoading":[{"__symbolic":"method"}],"getLoopAnimationsForCircleSquareDiamondWidgetLoading":[{"__symbolic":"method"}],"getEndAnimationsForCircleSquareDiamondWidgetLoading":[{"__symbolic":"method"}],"setLoadingForEmojiWidget":[{"__symbolic":"method"}],"setLoadingForDefaultWidget":[{"__symbolic":"method"}],"getNameFromShape":[{"__symbolic":"method"}],"getAccessibilityDescriptionForShape":[{"__symbolic":"method"}],"getUpdateGradientColorAnimation":[{"__symbolic":"method"}],"getChangeColorAnimation":[{"__symbolic":"method"}],"getTransitionToCircleAnimation":[{"__symbolic":"method"}],"getTransitionToSquareAnimation":[{"__symbolic":"method"}],"getTransitionToDiamondAnimation":[{"__symbolic":"method"}],"getRotateBackAndForthAnimation":[{"__symbolic":"method"}],"getToFullScaleBounceAnimation":[{"__symbolic":"method"}],"getToFullScaleAnimation":[{"__symbolic":"method"}],"getToFullScaleCompleteRotationAnimation":[{"__symbolic":"method"}],"getTransitionToLayerAnimation":[{"__symbolic":"method"}],"getShiftLayerVerticallyAnimation":[{"__symbolic":"method"}],"getCircleAnimation":[{"__symbolic":"method"}],"getSquareAnimation":[{"__symbolic":"method"}],"getDiamondAnimation":[{"__symbolic":"method"}],"getToGrayScaleAnimation":[{"__symbolic":"method"}],"getFadeAndShrinkAnimation":[{"__symbolic":"method"}],"getFadeDetailsAnimation":[{"__symbolic":"method"}]}},"CommentFeedback":{"__symbolic":"interface"},"ɵa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Injectable","line":37,"character":1}}],"members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/http","name":"Http","line":42,"character":28}]}],"initGapiClient":[{"__symbolic":"method"}],"checkText":[{"__symbolic":"method"}],"suggestScore":[{"__symbolic":"method"}]}}},"origins":{"ConvaiCheckerModule":"./src/app/modules/convai-checker/convai-checker.module","InputEvent":"./src/app/modules/convai-checker/convai-checker.component","DemoSettings":"./src/app/modules/convai-checker/convai-checker.component","DEFAULT_DEMO_SETTINGS":"./src/app/modules/convai-checker/convai-checker.component","ConvaiChecker":"./src/app/modules/convai-checker/convai-checker.component","Shape":"./src/app/modules/convai-checker/perspective-status.component","Emoji":"./src/app/modules/convai-checker/perspective-status.component","Configuration":"./src/app/modules/convai-checker/perspective-status.component","ConfigurationInput":"./src/app/modules/convai-checker/perspective-status.component","ScoreThreshold":"./src/app/modules/convai-checker/perspective-status.component","LoadingIconStyle":"./src/app/modules/convai-checker/perspective-status.component","DEFAULT_FEEDBACK_TEXT":"./src/app/modules/convai-checker/perspective-status.component","PerspectiveStatus":"./src/app/modules/convai-checker/perspective-status.component","CommentFeedback":"./src/app/modules/convai-checker/perspective-status.component","ɵa":"./src/app/modules/convai-checker/perspectiveapi.service"},"importAs":"@conversationai/perspectiveapi-authorship-demo"}